<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/EnnemiPatrouille.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/EnnemiPatrouille.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.AI;&#10;&#10;public class EnnemiPatrouille : MonoBehaviour&#10;{&#10;    public Vector3 centreZone;&#10;    public float rayonZone = 5f;&#10;    public float tempsAttente = 1.5f;&#10;&#10;    private NavMeshAgent agent;&#10;    private float timer = 0f;&#10;    private bool enAttente = false;&#10;&#10;    void Start()&#10;    {&#10;        agent = GetComponent&lt;NavMeshAgent&gt;();&#10;        if (agent == null) Debug.LogWarning($&quot;{name}: NavMeshAgent manquant&quot;);&#10;        ChoisirNouveauPoint();&#10;    }&#10;&#10;    void Update()&#10;    {&#10;        if (enAttente)&#10;        {&#10;            timer += Time.deltaTime;&#10;            if (timer &gt;= tempsAttente)&#10;            {&#10;                enAttente = false;&#10;                ChoisirNouveauPoint();&#10;            }&#10;        }&#10;        else if (agent != null &amp;&amp; !agent.pathPending &amp;&amp; agent.remainingDistance &lt; 0.5f)&#10;        {&#10;            enAttente = true;&#10;            timer = 0f;&#10;        }&#10;    }&#10;&#10;    void ChoisirNouveauPoint()&#10;    {&#10;        Vector2 randomCircle = Random.insideUnitCircle * rayonZone;&#10;        Vector3 destination = centreZone + new Vector3(randomCircle.x, 0, randomCircle.y);&#10;        if (agent != null)&#10;            agent.SetDestination(destination);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Slurp.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Slurp.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class Slurp : EnnemiComportement&#10;{&#10;    private Animator animator;&#10;    private bool isDead = false;&#10;    private Transform player;&#10;    &#10;    [SerializeField] private float detectionRadius = 1.5f;&#10;    [SerializeField] private float jumpDetectionHeight = 2f;&#10;    &#10;    private void Start()&#10;    {&#10;        animator = GetComponent&lt;Animator&gt;();&#10;        player = GameObject.FindGameObjectWithTag(&quot;Player&quot;)?.transform;&#10;        &#10;        if (animator != null)&#10;        {&#10;            animator.SetBool(&quot;IsWalking&quot;, true);&#10;        }&#10;    }&#10;    &#10;    private void Update()&#10;    {&#10;        if (isDead || player == null) return;&#10;        &#10;        CheckPlayerInteraction();&#10;    }&#10;    &#10;    private void CheckPlayerInteraction()&#10;    {&#10;        Vector3 slurpPosition = transform.position;&#10;        Vector3 playerPosition = player.position;&#10;        &#10;        float distanceToPlayer = Vector3.Distance(slurpPosition, playerPosition);&#10;        &#10;        // Vérifier si le joueur saute sur la tête de Slurp&#10;        if (playerPosition.y &gt; slurpPosition.y + 0.5f &amp;&amp; distanceToPlayer &lt;= 1.5f)&#10;        {&#10;            DestroySlurp();&#10;            return;&#10;        }&#10;        &#10;        // Vérifier collision latérale avec le joueur (même niveau Y)&#10;        if (Mathf.Abs(playerPosition.y - slurpPosition.y) &lt; 1f &amp;&amp; distanceToPlayer &lt;= 1.2f)&#10;        {&#10;            KillPlayer(player.GetComponent&lt;Collider&gt;());&#10;        }&#10;    }&#10;    &#10;    private void DestroySlurp()&#10;    {&#10;        isDead = true;&#10;        &#10;        if (animator != null)&#10;        {&#10;            animator.SetBool(&quot;IsWalking&quot;, false);&#10;            animator.SetBool(&quot;IsDying&quot;, true);&#10;        }&#10;        &#10;        Destroy(gameObject, 2f);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class Slurp : EnnemiComportement&#10;{&#10;    private Animator animator;&#10;    private bool isDead = false;&#10;    private Transform player;&#10;    &#10;    [SerializeField] private float detectionRadius = 1.5f;&#10;    [SerializeField] private float jumpDetectionHeight = 2f;&#10;    &#10;    private void Start()&#10;    {&#10;        animator = GetComponent&lt;Animator&gt;();&#10;        player = GameObject.FindGameObjectWithTag(&quot;Player&quot;)?.transform;&#10;        &#10;        if (animator != null)&#10;        {&#10;            animator.SetBool(&quot;IsWalking&quot;, true);&#10;        }&#10;    }&#10;    &#10;    private void Update()&#10;    {&#10;        if (isDead || player == null) return;&#10;        &#10;        CheckPlayerInteraction();&#10;    }&#10;    &#10;    private void CheckPlayerInteraction()&#10;    {&#10;        Vector3 slurpPosition = transform.position;&#10;        Vector3 playerPosition = player.position;&#10;        &#10;        float distanceToPlayer = Vector3.Distance(slurpPosition, playerPosition);&#10;        &#10;        // Vérifier si le joueur saute sur la tête de Slurp&#10;        if (playerPosition.y &gt; slurpPosition.y + 0.5f &amp;&amp; distanceToPlayer &lt;= 1.5f)&#10;        {&#10;            DestroySlurp();&#10;            return;&#10;        }&#10;        &#10;        // Vérifier collision latérale avec le joueur (même niveau Y)&#10;        if (Mathf.Abs(playerPosition.y - slurpPosition.y) &lt; 1f &amp;&amp; distanceToPlayer &lt;= 1.2f)&#10;        {&#10;            KillPlayer(player.GetComponent&lt;Collider&gt;());&#10;            Destroy(gameObject);&#10;        }&#10;    }&#10;    &#10;    private void DestroySlurp()&#10;    {&#10;        isDead = true;&#10;        &#10;        if (animator != null)&#10;        {&#10;            animator.SetBool(&quot;IsWalking&quot;, false);&#10;            animator.SetBool(&quot;IsDying&quot;, true);&#10;        }&#10;        &#10;        Destroy(gameObject, 2f);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>