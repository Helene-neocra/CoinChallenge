<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/FloorGenerator.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/FloorGenerator.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;public class FloorGenerator : MonoBehaviour&#10;{&#10;    public event System.Action&lt;float, float, float, float&gt; OnFloorGenerated;&#10;    public GameObject[] floorPrefabs;&#10;    public GameObject platformPrefab; // Prefab spécifique pour la plateforme, assignable depuis Unity&#10;    public int worldSize = 2;&#10;    private float _spacing = 4f;&#10;&#10;    void Start()&#10;    {&#10;        GameObject prefab = floorPrefabs[Random.Range(0, floorPrefabs.Length)];&#10;        _spacing = prefab.GetComponentInChildren&lt;RefPointFloor&gt;().getDistance() * 2;&#10;        GenerateFloor();&#10;        GeneratePlatForm(); // Génération automatique de la plateforme au démarrage&#10;    }&#10;&#10;    void GenerateFloor()&#10;    {&#10;        for (int x = 0; x &lt; worldSize; x++)&#10;        {&#10;            for (int z = 0; z &lt; worldSize; z++)&#10;            {&#10;                Vector3 position = new Vector3(x * _spacing, 0, z * _spacing);&#10;                GameObject prefab = floorPrefabs[Random.Range(0, floorPrefabs.Length)];&#10;                Instantiate(prefab, position, Quaternion.identity);&#10;            }&#10;        }&#10;&#10;        var minX = -_spacing / 2;&#10;        var minZ = -_spacing / 2;&#10;        var maxX = worldSize * _spacing - _spacing / 2;&#10;        var maxZ = worldSize * _spacing - _spacing / 2;&#10;        OnFloorGenerated?.Invoke(minX, minZ, maxX, maxZ);&#10;    }&#10;&#10;    void GeneratePlatForm()&#10;    {&#10;        // Vérifier qu'un prefab de plateforme est assigné&#10;        if (platformPrefab == null)&#10;        {&#10;            Debug.LogWarning(&quot;Aucun prefab de plateforme assigné ! Veuillez assigner un prefab dans l'inspecteur.&quot;);&#10;            return;&#10;        }&#10;        &#10;        // Calculer le centre du terrain généré&#10;        float centerX = (worldSize - 1) * _spacing / 2f;&#10;        float centerZ = (worldSize - 1) * _spacing / 2f;&#10;        &#10;        // Choisir un côté aléatoire (0=Nord, 1=Sud, 2=Est, 3=Ouest)&#10;        int randomSide = Random.Range(0, 4);&#10;        Vector3 platformPosition;&#10;        &#10;        switch (randomSide)&#10;        {&#10;            case 0: // Nord - juste à côté du bord nord&#10;                platformPosition = new Vector3(centerX, 0, (worldSize - 1) * _spacing + _spacing);&#10;                break;&#10;            case 1: // Sud - juste à côté du bord sud&#10;                platformPosition = new Vector3(centerX, 0, -_spacing);&#10;                break;&#10;            case 2: // Est - juste à côté du bord est&#10;                platformPosition = new Vector3((worldSize - 1) * _spacing + _spacing, 0, centerZ);&#10;                break;&#10;            case 3: // Ouest - juste à côté du bord ouest&#10;                platformPosition = new Vector3(-_spacing, 0, centerZ);&#10;                break;&#10;            default:&#10;                platformPosition = Vector3.zero;&#10;                break;&#10;        }&#10;        &#10;        // Instancier le prefab sélectionné à la position calculée&#10;        Instantiate(platformPrefab, platformPosition, Quaternion.identity);&#10;    }&#10;}" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;public class FloorGenerator : MonoBehaviour&#10;{&#10;    public event System.Action&lt;float, float, float, float&gt; OnFloorGenerated;&#10;    public GameObject[] floorPrefabs;&#10;    public GameObject platformPrefab; // Prefab spécifique pour la plateforme, assignable depuis Unity&#10;    public int worldSize = 2;&#10;    private float _spacing = 4f;&#10;&#10;    void Start()&#10;    {&#10;        GameObject prefab = floorPrefabs[Random.Range(0, floorPrefabs.Length)];&#10;        _spacing = prefab.GetComponentInChildren&lt;RefPointFloor&gt;().getDistance() * 2;&#10;&#10;        // S'abonner à l'événement pour générer la plateforme après le sol&#10;        OnFloorGenerated += GeneratePlatformAfterFloor;&#10;&#10;        GenerateFloor();&#10;    }&#10;&#10;    void GenerateFloor()&#10;    {&#10;        for (int x = 0; x &lt; worldSize; x++)&#10;        {&#10;            for (int z = 0; z &lt; worldSize; z++)&#10;            {&#10;                Vector3 position = new Vector3(x * _spacing, 0, z * _spacing);&#10;                GameObject prefab = floorPrefabs[Random.Range(0, floorPrefabs.Length)];&#10;                Instantiate(prefab, position, Quaternion.identity);&#10;            }&#10;        }&#10;&#10;        var minX = -_spacing / 2;&#10;        var minZ = -_spacing / 2;&#10;        var maxX = worldSize * _spacing - _spacing / 2;&#10;        var maxZ = worldSize * _spacing - _spacing / 2;&#10;        OnFloorGenerated?.Invoke(minX, minZ, maxX, maxZ);&#10;    }&#10;&#10;    void GeneratePlatformAfterFloor(float minX, float minZ, float maxX, float maxZ)&#10;    {&#10;        // Vérifier qu'un prefab de plateforme est assigné&#10;        if (platformPrefab == null)&#10;        {&#10;            Debug.LogWarning(&quot;Aucun prefab de plateforme assigné !&quot;);&#10;            return;&#10;        }&#10;&#10;        // Placer la plateforme juste à côté du bord nord du terrain&#10;        float centerX = (minX + maxX) / 2f;&#10;        Vector3 platformPosition = new Vector3(centerX, 0, maxZ + _spacing);&#10;&#10;        Instantiate(platformPrefab, platformPosition, Quaternion.identity);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>